Kelly Schuster-Paredes:
Hello.

Sean Tibor:
And welcome to Teaching Python. This is episode 78, and it's all about hardware in the classroom. And so we're going to be talking this week about how we use microbits and circuit Python boards. We reinforce learning when it comes to computer science. My name is Sean Tyber. I am a coder that teaches.

Kelly Schuster-Paredes:
And my name is Kelly Schuster Perez, and I'm a teacher that codes. You got me all flustered already. You messed me up with the whole intro.

Sean Tibor:
I know I got started with the whole idea of this hardware topic. I get excited about it. I just want to talk about it.

Kelly Schuster-Paredes:
I know it's never ending with you.

Sean Tibor:
It might be one of my more charming traits. I guess I'll give you that. Okay.

Kelly Schuster-Paredes:
All right.

Sean Tibor:
So before we get into our topic this week, I wanted to start where we always do, which is the winds of the week. So, Kelly, it's something good that's happened inside or outside the classroom. And I'm going to give you a few extra minutes to prepare and go first myself. So this week, I think the most surprising and amazing win was Minecraft Education Edition. So I was trying to fill a few class lessons with some new content, some things that I wanted to experiment with the students on. They've been working so hard on hardware. We'll get to that in a minute. And I think they were finding it really frustrating to get things going and to move it forward. So I thought, what better way to get them excited and reinvigorated about the promise of code than letting them play around in Minecraft and find some stuff? So I made a deal with them. I said, okay, we're not going to have any homework. We're not going to have any sort of assignments, no quizzes, no challenges, no grades. You have this playground of Minecraft. And the only thing I ask is that you do something with code. We're going to do an old school show and tell at the end of the quarter, there's no grade for it. You're just going to show what you made, tell everyone how it works, show the code on screen that makes it work. And the only criteria is that it has to have some sort of code that goes with it. And I was so astounded by how much these kids got into it. And I wouldn't say that it was anything terribly sophisticated in terms of the complexity of the code or the concepts that they were applying. But it was back to that basic idea of having fun and making things happen in code. And I had a student who last year was not my strongest student. This year, he's been a lot stronger seeing a different person. It's one of the things I love about middle school, but he not only demonstrated his Python code that caused his little Minecraft robot, this thing called an agent that can build for you and move around and everything. He got his agent to build an entire house, including doors and windows and a roof and all of these things. And he just could press the button and say, Go, and it would start building it wall by wall and put the roof on it and everything. And I looked at him. That's amazing. And this is all with Cody's, like, yeah, let me show you the world that I was testing in. So then he goes over this other world in Minecraft where he had been testing out his code, and from where he was standing out to their horizon, there was just this line of messed up and janky looking like walls and houses and stuff like that. His approach had been just to keep experimenting and keep trying until he got it right. And I think he probably built 50 or 60 houses using code before he got it perfected the way he wanted. And I was just so proud of him to see him go through that work and the effort and the enthusiasm for making this work. And he was so persistent and determined to get this house to work. And I was just so proud of him. It was such a good way.

Kelly Schuster-Paredes:
That's awesome. That's awesome.

Sean Tibor:
Yeah.

Kelly Schuster-Paredes:
Having fun with the Minecraft is always a nice thing to do. At the end of the nine weeks, we kind of cheat. I thank you. And we give the last week of the quarter as the best time in computer science so that they leave on a win and they tell everybody how awesome it is and lots of hubs. It's like we're leaving the school year lots of hugs yesterday from all of our students saying, oh, we're going to miss computer science, but we're literally down the hallway.

Sean Tibor:
Always leave them wanting always.

Kelly Schuster-Paredes:
So my win. I'm not sure it was my win per se. It was a little bit aggravating for both you and I, but I had a really good end of the week unit that I pulled out of the hat. I brought down this antique red light, yellow light sound meter. It goes off when the kids are too loud. I have an advisory group with a lot of boys who are very excited in the morning. So I was joking around. I brought it off the shelf, plugged it in and it hits like, 80, 90 decibels or something, and it goes off with this annoying sound. So the kids came in 6th grade and 7th grade 6th graders were working with the MicrobeDS. 7th graders were working with the circuit playground. I, too, did not want to grade any more items the last week of the quarter, and I said, okay, we're having a shark take week, and they're like, what? And I said, Your job is to build your own personal sound level meter gadget out of the microbes for the 6th graders and out of the circuit playground for the 7th graders, and the winner gets a sticker or candy or whatever you guys want. And it turned out to be a very fun time. I had a couple of girls who put, like, an RGB Led light, so that not only did the microbit blink with the level of or scroll with Shhh, the light came on as well, and there's a lot of clapping going on, a lot of screaming into the microbits, a lot of screaming going into the circuit playground to watch the NeoPixels light up. So it wasn't really my win. The win was that they were engaged. They're having fun. I know that you were listening.

Sean Tibor:
If any listener wants to send me a better pair of noise canceling headphones, I wouldn't send it back.

Kelly Schuster-Paredes:
I was like, just clap. You don't have to scream. You know that into the little hardware, like, screaming closer made a difference. I don't know.

Sean Tibor:
I don't know. My favorite, though, is there's one kid and it might be a vocal tech. I'm not even sure, but he just was pulling out this Michael Jackson.

Kelly Schuster-Paredes:
And.

Sean Tibor:
I was dying. I'm like, first of all, where did he get this from? This is like a ten year, eleven year old kid. How does he know about Michael Jackson and everything from the 80s? I probably just went over to him, and I was like, Look, I'm not going to tell you, don't do that. But I'm telling you, you get two of those for the class, period. Use them wisely. It was loud and boisterous, and they were clearly having a lot of fun. Absolutely.

Kelly Schuster-Paredes:
And another group of students found a really nice piece of code and they were saying, Can you use this? Is this acceptable? And I said, Only if you get up and present every single line of that code. Tell me what those functions are. Tell me what those parameters are. Tell me what those equations were and they got up and they knew it. And it was so nice. We even talked about how the sound level came in as an index to a list of different images. It was great. I'll try to find that link to that code and maybe share it, but it was a great project, and it just reminds us. And I think that's why you were inspired to talk about hardware, about how powerful not only the microbials, but the circuit flag. Just crazy amount of learning going on with those two little gadgets.

Sean Tibor:
Yeah, we should cover the fails of the week before we get into the hardware. But you're absolutely right. There's something that is really powerful for the learning experience that iterative loop, including some sort of tangible feedback, whether it's something you can see visually or something you can feel or hear it buzzes, whatever that is. That feedback loop when it has some sort of action that's outside of just seeing tech scroll by on the screen is really powerful. I think my fail this week was really just coming down to grades again and trying to figure out the right way to handle all the grades. We talked last week about Colab and all the problems that we had there, and it took me a while to sort out the best way to handle all those assignments that were based on Colab where the students couldn't complete, and by the time I had it figured out, it was a little too late for them to make up the assignments or to do any of the work. So I went through and I looked at probably three or four different scenarios for how to handle those grades and make sure that was fair and reasonable because I couldn't just excuse all of the grades, because then it would mean that everything was based on code. Challenges were like five points here, seven points there, and I didn't want to penalize anyone for CoLab's lack of compatibility. So it ended up just being this struggle to figure out how do I fairly do the grades in a way that reflects the work that the students had done and the work that they attempted to do even if they weren't successful?

Kelly Schuster-Paredes:
Yes, it was challenging. I think that I did just a lot of excuses. On the end, I had only the last choice bird that really affected my grades, so I got lucky and I was able to I got the kids in the habit of sharing the club early on so I could just share back to their personal email. So we worked around that, but yeah, that was a rough time. My sales a week. I'm going to have to use last ones too. With the circuit playground. I still haven't gotten comfortable enough with solving issues right away with the circuit playground, looking at trying to get some of the playgrounds to work, seeing if the wires are data transfer, and luckily we have the stack of them. So if a student comes up to me that this is not working, I just throw give me another circuit playground. Let's do another one, and so I can easily check that this one has the library files installed and this one has the boot loader installed. Just being able to figure out and problem solve quicker has been a constant fail. I'm failing forward, though, because I did get some code that I wrote myself without copying and pasting it from the adfree website. So I guess that comes with all them too, but I digress. So fail. Yes, circuit playgrounds.

Sean Tibor:
We're going to talk about that because I think it's a good segue. There's a lot of reasons for that, and knowing how to teach with this different hardware is not an easy thing to first pick up. I think it's a little bit different when you're a hobbyist or maker or something like that and you start off by ordering something and you're trying to figure it out and you've got this really clear desire to make something work that's a little different than when you're in a classroom and a teacher is like, here's this board. Here's some instructions. Go figure this out, and we want them to figure it out. But they didn't necessarily have all the purpose. I think at the beginning that we wanted and then we also didn't have the mechanism right for them to learn it. So there are definitely a lot of challenges along the way, and we'll get into that. I think a lot of this will be kind of us dissecting and debriefing on what worked and what didn't and what we're going to do next quarter. Yeah.

Kelly Schuster-Paredes:
I'm very excited about this. I keep me always post about reflection. So this is like take notes. We go back and listen to our podcast. Oh, yes. That's what we needed to do for this quarter.

Sean Tibor:
And we're going to start at the beginning. So our goal is that we don't assume any knowledge about the hardware that we're about to talk about. So we're going to try to start by explaining everything, but I think it will be helpful to know just that if you know Python, if you've been listening to the podcast as we've been discussing it, there are some concepts that we're going to gloss over pretty quickly around Python, so we can focus more on the hardware and the specific implementations of micro, Python and Circuit Python.

Kelly Schuster-Paredes:
That's good.

Sean Tibor:
Okay. So let's start with the microbit, which is I think, one of the first places where it started the microbit is this really cool project from the BBC in the UK. And it started, I think, five or six years ago with the Microbit V one? No, because there's the earlier BBC programs that came along that were there from the 80s and the 90s, and it made a huge difference in the UK for a lot of people to get started with programming and computer science. And then the BBC released their microbit as sort of a reboot or refresh of that mission to educate the public, especially around computer science and this topic. So the microbit itself is a small hardware board. It's a microcontroller board. I'm not even sure if I have one sitting on my desk right here. I've got so many other ones around blocks of boards, but it's maybe two inches wide by an inch and a half tall. It's a little rectangular board. It's got some gold bars across the bottom that you could hook up alligator clips that plugs into your computer with USB. And one of the great things about it is that you can run different programs on a different programming languages, so you can use block based code with it works with scratch. It works with make code, but it also works with a flavor of Python called Micro Python, which was derived from the overall Python language but simplified and made focus to be able to run on a microcontroller. So, Kelly, we've talked about this a lot with our students. Do you want to cover the part about why we can't have all of Python on this little microcontroller?

Kelly Schuster-Paredes:
Leave me the hardest part. So you can have a sip of your drink. So why can't we have? Because it doesn't have enough storage. So the way that I tell the kids and I teach it with less vocabulary, I say to my 6th graders, okay, we have your computer that runs Python, and you have this computer, this little microbes that needs to run Micro Python. We have to strip out everything. We have to go down to the bare bones and basic so that we can hold all our code on this tiny little computer.

Sean Tibor:
Right.

Kelly Schuster-Paredes:
Hold on. Can you get what you're doing and go quickly?

Sean Tibor:
Yeah, I couldn't have put it better. I think that's a great way of stating it. Microbit is a wonderful platform, and they cost about $15. So we're looking at a really small, relatively powerful for $15 board, and it has all these little sensors and lights and inputs and outputs on it that we can use. And then recently, within the past year, the biker bit V Two was released. So just some improvements the way that the board was laid out, even down to things like little notches cut out so that your alligator clips or crocodile clips for friends in the originating country of the UK would call it grab onto it a little bit better. It has a few more sensors on it. But this microbit is really great, and there's just one variant of it. There's two. Now there's the version one and the version two, but they run basically the same code and the same version of Micro Python that runs on both boards. And although you can extend it and you can do more with it, really, you're talking about a very simplified, focused experience that runs really, really well on those two boards. So, Kelly, you use these more than I do in the 6th grade. What are some projects that you do with them? What are some examples of how you use this? Yes.

Kelly Schuster-Paredes:
First of all, it's just one of these boards. It's an easy plug in and go. We actually use the pythonmicrobit. Org website to run and flash the lessons in there, but the documentation. I have to say this first. The Python documentation for the microbit is outstanding. It's easy to read. It's simple to go, so literally off the back we talk about here is our import statement. We're just going to import everything. We talk about the fact of the asterisk being used not only for math, but importing the whole tire module, and that we never do this with other modules. But the reason why we can do this with the microbit is because it's packaged so well for this device. And it's a great conversation about importing modules and talking about how you import certain packages and scripts within a module versus importing everything. So that's a new thing I learned this year.

Sean Tibor:
Yeah. So if you're a really idiomatic Python programmer, you're like, you shouldn't do a wildcard import. That's horrible. Like we're doing a wild card import. It's kind of awesome. It only works in this case because of the limited scope and because it's so well structured and it's very useful for your young coders.

Kelly Schuster-Paredes:
You don't really need to go in and say import or from microbit import buttons because the kids might want to use the LEDs, they might want to use the Penal and do not limit them. Just wildcard it. So anyways, we go in and we literally can start talking again about here's the object. Let's look at the microbiome as an object. Here's the Led 25 25 screen. That's an object. If you want that object to do something, then we have these methods. So it's a free for all.

Sean Tibor:
Almost.

Kelly Schuster-Paredes:
We start off with buttons and lights and designing their own pixels right off the bat. On the first day we open up the microbes. Obviously, the very fun thing for the kids is the music and the Nayan song that seems to play all the time. And without the need for attaching an external speaker with version two, it's even more detrimental to Sean's ears.

Sean Tibor:
Yes. One of the wonderful new features of the Microbes V two is it has a built in speaker. So before we used to have to add on speakers with crocodile clips or alligator clips, but now it has a built in. So every time a brand new microbit is plugged in out of the box, it makes this beautiful scale up and down and makes all this noise. And I can tell when it's microbit day in Kelly's class because everything starts making noise.

Kelly Schuster-Paredes:
Absolutely. I have always done the Led connection with the microbes, but this year, instead of allowing them to do the direct connection, I really enforced the breadboard with the Led and using a resistor and getting their hands into this hardware because I know that they love this. I also get an opportunity to do NeoPixel, which was great works simple with these. I forget what they called. You probably remember those little button NeoPixels. Oh, we do accelerometer shake Magic. April is always a great one. And then I found some really fun games, Snake Game, and it's just something that they can copy and paste. It's a very long code, but now they can see that this little microcontroller can play video games and it's quite addicting.

Sean Tibor:
Yeah. I would definitely encourage everyone to go Google this and take a look at what it has. We talk about being a $15 board and we talk about it having this very focused scope. I don't want to say limited, but a very focused scope of Python, but it is remarkable all the things that you can do with this because it has so many different features and components packed onto this board. You have A and B buttons. You have GPIO pins that you can connect other sensors to. You have a five X five Led display matrix, you have accelerometers, you have a temperature sensor, I believe, right. You have all of these different things built into the board, and you even have, like, a little Bluetooth radio built into it as well that can talk to other microbits. So just with this set of hardware that they've come up with, really, you're only limited by your imagination and creativity, right? And whatever many megahertz it runs at. But with all that, you've got the Finch robot that we talked about on last week's show, you've got all sorts of robot kits. You've got NeoPixel rings that can light up in RGB colors. So it is plenty fast for most of the basic electronics kits that you want to work with. The only real thing it doesn't have that might be interesting is that it doesn't really have WiFi built into it. So if you wanted to make it like an IoT device, it's kind of hard to do that. But this board has become incredibly powerful, and it's surprising how many different accessories have come out for it. We have everything from the capacitive touch keyboards for it to robot chassis like we talked about. We have the ability to drive Motors and servos with it all sorts of stuff, and it even has this little edge slot connector that you can plug it into if you want to make it a part of a bigger project. So it's a really powerful device, and we use it a lot in the 6th grade because of that ease of connectivity. Kelly mentioned the Python microbit. Org website, which is actually a really cool bit of technology. The website itself has the ability to connect to a USB device on your computer with your permission, so you can connect to your microbit from the web page. You could flash your code over to the microbit so it can run that code, and then you can even see the serial output right from the web page. So if you need something that's, like the the fastest way to get started with any sort of web based, you know, programming of the microbes, that's the way to go. And then the other alternative is the new editor, right?

Kelly Schuster-Paredes:
Absolutely. Little bit of issues with the new editor and the version two. It still works. It just throws an error each time, and the kids seem to think that it's not working, but it does flash the code on there. It's been a lot of work. That version two put a little bit of a hang up on Nick's team. Nick Totallervey's team. He's the creator of Moo, but it still kind of works. I like using the Moo editor with the microbes and then just flashing it with the Python microbet. Org website. I like the new editor using that microbit technique because you can see all the options and you get a whole drop down list of all the images. And it just makes coding a lot easier inside of Moo versus any other editor that we choose. I do want to point out something that's really cool and something dear to my heart is this tech for good awards, and I've always followed it around. They do a lot of activities with the microbes, and it's something I will put on our show notes, but they have these kids actually use the microbet to design projects for solving world problems. I was just doing a quick look on the 2021 winners, trying to think eleven year old Auto came up with the idea of an automatic upcycling with his microbes and a couple of little things like that. Pretty cool.

Sean Tibor:
So many things that you can do. There's just so much that's possible with us. Although it's a very focused board, it is a very versatile board as well. It does a lot of different things, but it's interesting when you contrast it with Circuit Python. So the Circuit Python boards are almost a different philosophy, right? Circuit Python is a derivative or a fork of the micro Python language that the microbit runs. We'll shift gears a little bit here and talk about how they work. So if the microbit is two boards, version one and version two and they're the same size, they have the same connectors, the same button placements, like the same basic physical dimensions. The Circuit Python, if I look at the website right now, has 241 different compatible boards for it. So there is a different design philosophy, and when you look at the history of it, it makes a lot of sense. Circuit Python was sponsored primarily by the Adafruit company, which makes a lot of different hardware. They have been for years, one of my favorite websites on the Internet, one of my favorite success stories coming out of the MIT projects. And the cool thing about this was it was a project that started in order to bring Python to as many of the Adafruit boards as possible. So Adafruit had a ton of little microcontrollers and microprocessors that were all running either some variant of Arduino or C or something else that was relatively hard to program, and the company decided, let's take a look at this micro Python language and see if we can make it more compatible with our board. So that was where it originally started, and now it's become its own flavor of Python on hardware. And they have a variety of different boards that you can use here. So I'm looking just through their list of boards on the website. You've got the Mag tag, which is one that I have right here, and it's super cool. It's a little e paper display with a battery on it, and mine is currently set to display the tides in my area, so it updates once a day with all the tide information. There's a fun house which has some cool WiFi stuff on it. The Pie portal. There's a tiny little board called the QTPi, which I thought was a great little Mae. There's Nano ESPS, there's stuff with lights on it, things that are smaller than the size of a postage stamp. If anyone remembers what a postage stamp is, Pie gamers wearable technology, light up buttons. I mean, just going through here. They have one called the Monster Mask that has two LLCD displays that you can wear over your eyes. There's just this huge variety of boards, and not all of them are made by Adafruit. Many of them are coming from other companies now and being used to make more hardware that's available for people to work with and learn from and play with. Now, Kelly, I know you have a love love relationship with the biker, but how would you describe your relationship with Circuit Python.

Kelly Schuster-Paredes:
For Ada Fruit? They get mad at me every time I say this and Shawn covers other Sean, right.

Sean Tibor:
Scott Rockshack.

Kelly Schuster-Paredes:
It is really a hard Ford. I'm not going to lie to anyone if you've made code. Hands down. Super simple, great project. The board itself is amazing. The lights, the colors, the ability getting in there. The kids always like, let's make no, we're teaching Python for teaching Python. It's the BlueFrew board. Now, the other boards I got used to.

Sean Tibor:
Yeah. Let's take a step back. So there is a board that's designed specifically for learning about Circuit Python and learning about hardware. It's called the Circuit Playground. So it's a round board about an inch and a half or two inches in diameter. And I think we're up to the third version of it now the Circuit Playground blue fruit that like the microbe. It has a lot of different components, all on the same board, including lights and sensors and even Bluetooth now. So there's a lot of different things with it. And this is the board that we introduce our students to Circuit Python with.

Kelly Schuster-Paredes:
Yeah, Sean getting ahead of himself. He loves the IoT, and I love it too. I love his pushing of me to learn more. I wasn't ready for that. So anyway, this board is great. And I think Circuit Playground has obviously so much potential. It is a difficult board if you are not prepared, right? I think for new learners, the 7th graders coming in a lot of handholding trying to figure out because you know why. And it's not the board's fault. It's the fact that there are so many projects and so many cool things to do that they get lost in a Google search field of information, and it's overwhelming. I actually found out last weekend as I was reading on my phone that reading the eight of Fruit Red website so much better on the phone. Just a little tidbit out there it wipes out all the ads, all the purchase stuff, and it really focuses you in on the information. And the write up is so clean and clear. And as long as you can Hone in on that, it is pretty cool. I'm slowly liking it now that I can manipulate a little bit of NeoPixels and buttons.

Sean Tibor:
Well, I think the best way to describe this is just by comparing the out of box experience between the microbit and the circuit playground. So maybe this is helpful also for people who are trying to figure out how do I get started with these. So let's say you go on Amazon and you click on the microbit and you order a microbit to work with. You get this little board and you have a little USB cable that maybe comes with it. If you order the Go pack or you can use any micro USB cable, you go to a website, Python microbit. Org. You plug the cable into your computer, the other end into your microbit. You write some Python code, you hit the connect button. It connects to your board says which board you want to choose from. You choose your board, and then you say Flash and your code gets copied from your computer over to the microbit, and your microbit starts running the code. Yes.

Kelly Schuster-Paredes:
There's no learning curve for the six graders who like to name their files. Ridiculous names that make absolutely no sense.

Sean Tibor:
We'll get to that a minute when we get to the circuit plague or something.

Kelly Schuster-Paredes:
No, we're talking about microbit. I'm just saying for a newbie for a newbie it is a no Raider. You go in, the kids can get on it and do their thing, but there's limits.

Sean Tibor:
Right.

Kelly Schuster-Paredes:
So if we're comparing start newbie.

Sean Tibor:
Awesome.

Kelly Schuster-Paredes:
Plug it in, go start coding, produce some cool projects.

Sean Tibor:
Right. And it all fits in one file. Right. So I have my one Python file. I don't have extra libraries. I don't have extra capabilities. What I start with is pretty much what I get. Now, there are a few things you can do. Like you can update a newer version of Python on your board and all of these things, maybe change the bootloader. But that's kind of advanced stuff and not really necessary just to get I think the Hello world of hardware, which is I want to make an Led blink. If I want to make an Led blink or Flash on the microbit, I can plug in, go to the website, start writing code or copy code over from another tutorial, paste it in Hit Flash, and I should be able to see a light start blinking on my board. Right. So really pare down focused experience. Now they will get to the trade offs that are necessary for that. But everything goes into one file. You flash it over the circuit playground works a little bit differently. So when I get a circuit playground from Adafruit, it comes with some code that's running on the board already. It lights up all the NeoPixels. It makes some noises when I press the buttons that's already flashed on there. But in order to get the Circuit Playground to work, I have to download the Circuit Python code from a website, circuit Python. Org. And this is like the operating system for my board. It's like the Mac OS or your Windows Ten that goes on the hard work. I have to download that from the Internet. First, I have to double click a reset button in the middle of my Circuit Python board, and I have to copy that file called a UF two file that I downloaded before over to my Circuit Playground, and it will reboot with Circuit Python installed. Now, one of the things that's really interesting about this, and I think because of the design philosophy here is that when you get that Circuit Python that basic Circuit Python installed, you don't get a lot with that. It's a very basic, bare bones, minimal installation of Circuit Python. When it reboots, what you get is a little drive that pops up on your computer, just as if you were to plug in a flash drive or a hard drive or something like that onto your computer, you get this little drive that pops up that says Circuit Pi. And I think this is where students have to make that leap. So getting the Circuit Python operating system, if you will, installed on the board, is a big hurdle. First of all right, there's a lot of steps to follow, and it's kind of confusing. And what do you mean? I have to double click the button and does it light up green? And when students don't like to actually read instructions, it makes it pretty challenging.

Kelly Schuster-Paredes:
But I have to interject it. So as much as it was challenging, I loved the learning moment of that because there were so many skills. There are so many skills that are involved with kids in this generation, especially kids who have only had a computer for. This is their second year with a laptop, and we forget these things. Sometimes that kids could either have the Chromebooks. We have cell phones, so they're not used to manipulating data or manipulating files and moving things into folders. And I think it's brilliant as much as it was painful in the beginning, I think it was brilliant having that idea that here we're plugging in a really tiny computer that can do cool things. But it comes with no packages installed. So it's like getting your MacBook and then installing Moo and installing all this other stuff. So that was a key moment for kids, and I like to remind them that that double pushing of the button is kind of like a hard reset on your phone or on your ipad. You just wiping that computer clean. And it's like clearing it off. Bye bye. And it made sense to them when you start talking about that.

Sean Tibor:
Yeah. And I think if you even want to apply a metaphor to this, I think the difference is let's say you move houses and you move into it. You have your new bedroom. The microbit is like walking into your new bedroom, and there's a pretty nice bed in there and a desk and a lamp, maybe a dresser with some place where you put some clothes and some hangers on the hooks. And it's complete. And it works really well. But you didn't get to choose any of those things, right. And it's a pretty small bedroom, right. But you didn't get to choose, like, I want to have a bean bag over here. I want to have these things. If you want a beanbag, you have to make it yourself. But you get a lot. When you start, you have a place to sleep. You have a place to study. You can lay on the bed and watch TV, and you have a place to put your clothes. And that's pretty much it I am oversimplifying, but that's kind of the microbe experience. But the Circuit Python experience is basically like, here's this room that we're going to call your bedroom, and we've laid it out with some carpets and stuff like that, and it's painted nicely, but it's empty. You have to put everything in for what you want to do next. Right. So the question is, is this even a bedroom? Maybe you want it to be an office, maybe you want it to be a TV watching or gaming room or whatever. They're not assuming that the purpose of this is going to be a bedroom. This is a room. And then right outside the door, we've helpfully provided for you all of these amazing things that you can put into your room to make it however you want. And it's a different design philosophy. And I think that's where the second key learning moment happens for students, because all of those great things that data fruit and the Circuit Python team is providing to you are what we call libraries, right. And those libraries allow us to customize the room, the board to have whatever we want. And that is, I think the second part where students have this learning moment where they may be right into a little bit of trouble, a good trouble, which is I have to copy over all the libraries to the board that I want to be able to write my code. And that includes things like if I'm using the Circuit playground board, I can copy over a basic library that has a lot of the Circuit playground features already installed. But I also need to copy over the NeoPixel library and the simple I. O library, and maybe the Accelerometer library and all these things that are already built onto the board that I need to copy into my library folder so that I can actually use them and not all of those are going to be immediately used by the student. They're often dependencies for other things that they want to do. So you can't just copy over one file you have to copy over the Circuit Playground library, and then, like four other files to be able to make sure that your code will run at the beginning.

Kelly Schuster-Paredes:
And I think for me thinking about this whole process with the kids and actually being almost at the same level with the students during this teaching, there were little things that I did, and it helped the students navigate a little bit more. We take for granted a little bit about the cereal, and we don't really talk about using the cereal part of Moo because we did use Moo with the Circuit playground as well. It comes up when we run our code using Python for using basic coding, we have that ruffle coming up, whatever we interact it. But when we get into the Circuit playground and we click on the serial button and we have to push control D in order to see the information or see where our errors are, it was a big door opened up. It's like going back to your metaphor with the bedroom instead of having a single door. We had this huge wide door and we could just go in and start investigating. And it was cool to see as we started to debug and look at all the problems. Oh, there's no module for your NeoPixels. Well, did you import the library? What do you mean? Well, if you're using this piece of code, remember, you have this script that needs to go in there. And it was a great learning moment just for them to understand that all that information is not imported with them. So wildcard microbit, just get it all in. Don't worry about what you're importing. Now we're able to talk about. Here are your modules. Here's how you select what you need in order to import and make your code efficient. And so that was a huge opportunity to talk about things that we had not done in the past. And I appreciate at that moment.

Sean Tibor:
I think this is also a really interesting point about kind of the experience that students have had, especially middle school high school students up to this point because they don't necessarily think about things like storage and memory the same way that maybe I did when I was growing up like I had an Apple two GS, right. That was the amazing computer that I had. And it was incredible for the time. But you had what you could store on a floppy disk. Right. And you had what you could run in memory and you could run one program at a time. And this is probably their first experience with that. They know about closing browser tabs. They know they can't have that many programs open. They know those things. But I always am just delighted. The first time a kid goes, Well, you're telling me that I have to have a library file installed on the Circuit Python board. I'll show you, I'm going to copy all of them over, and then they get that error message and they're like, what do you mean? There's not enough disk space to do this, right. And so that's where we use the metaphor again. So if we're using the room metaphor, it's like having this room that's maybe twelve foot by twelve foot or 4 meters by 4 meters for our non US friends.

:
Right.

Sean Tibor:
And then you have this giant moving truck outside with all the stuff. You can't possibly cram everything into that space and have it be functional and usable. There's only a certain amount of storage. You have only a certain amount of processing power. You can't copy everything over. And so you have to be selective and deliberate. And I think that's another great AHA moment for them when they realize that I'm making choices, like, I have to choose what I want to do. And in order for this bit of code that I want to run, to be successful, I have to copy over the right libraries, not just every library. They've been so used to having gigabytes of storage on their laptop that they can download whatever they want and run whatever they want. And it's not going to be a huge problem.

Kelly Schuster-Paredes:
And then another learning moment is when they would go to save their code and they would look at me and say, It's not running, and we go through the steps. Are you in Circuit Pie mode? Have you installed the library? Have you saved it a certain way?

Sean Tibor:
Yes.

Kelly Schuster-Paredes:
And then I'm like, okay, so where are you saving it? What do you mean? Are you saving it on your computer? Are you saving it onto the Circuit playground? And so this again, moving things around, putting them in the right places. Oh, I'm saving it in the new code folder. It's not going to work there. So we got to move it over to another device, and it's a great moment so that they understand again, here's our storage here's where we're putting things, and we need to put them in the right spots in order to work. Same thing with the libraries. We can't just throw the modules outside of the lid folder and expect it to run. We need to package it and put it nice and neatly so that our code knows where to look. And it's a great it's just those little things of a week of learning. It's nice to see that they start together.

Sean Tibor:
Yeah. So if you're trying to keep notes of how to get started with the Circuit Playground board, so you've flashed your Circuit Python code you've copied over your libraries from the library bundle into this little special folder on your circuit pie drive called Lib, and then you have to have a file on your Circuit Pie drive named Code PY or Main PY, or two other file names that I never remember because I never use them. But there's like, four different specific file names that your code has to be named as in order for Circuit Python to find it and run it. And that's another big moment that students have because they're not necessarily file oriented anymore. Right? They have a Google Doc, they have a Google drive, they get an email, they're not seeing the files and file structure. And so this is another great moment where we can talk to them about what your code is running on the board, which means that you have to actually have your code on the board. And if the Circuit Python operating system, if you will, is looking for a code PY file in order to run your code. If you name your file Sussey because you're really into a bug us, it's not going to work because it's looking for code PY. How does it know to look for SESSI PY? And so that's that final step is check. I've got Circuit Python check two, I've got the library files that I need and check three is I've got a code PY file or Main PY. If you want to use that that has my Python code in it, that Circuit Python is running, and then your fourth check is I've got the serial Port open. I press that button in the new editor to see the output coming back from the board telling me what it's doing and reporting any errors or error messages that it might be having.

Kelly Schuster-Paredes:
Okay, so let's talk about the hidden gem. Besides the fact that Adafruit has loans and loads and loads of information on their website. And this is something that we love about Adafood as a newbie I'm not going to lie. Three years ago, it was overwhelming, but you could always find so many cool projects like, one day I'm going to do that one day, I'm going to do that. But anyway, inside of this Adafruit Circuit Python bundle folder that you can download, not only are all your libraries in there, but there's this beautiful folder in their quote, examples and everything you can possibly imagine and more to do with the clue, the trinkets, the feather. Everything is in this folder as a newbie a little hint of people first starting out. Do not give that folder to your students unless you show them what files to look at, because you really have to sift through codes like, I understand versus codes that more advanced circuit playgrounds users can use. And there are some really good simple codes in there that have five lines and you can have the students push button, a CP button, a play, a tone CP button underscore B play this tone, and that allows the students to just get started and to work through the basics. And that movement from the microbit into the Circuit Playground and finding that the kids were able to mesh together their own code. I'd have a button, a do a NeoPixel or button B do a sound sensor. So what a gem when you start digging into that folder?

Sean Tibor:
Yeah. And I think the other thing that's really important about this, too, is that that library bundle is constantly being updated, so you might find an outdated guide. Maybe it's not on Adafruits website. Maybe it's somewhere else where they're using some code that works with an older version of Circuit Python, or works with a different board that looks exactly the same called the Circuit Playground Express and doesn't have the blue fruit in it. Right. Which is another stumbling block. We read it to. The Examples folder is pretty current and up to date, so you can be well assured that when you find an example in there, it's going to work. And if it doesn't work, it's pretty easy to make a pull request to say, hey, this example needs to be updated, and here's how so you can contribute back to that Examples folder and make it work. So I guess, Kelly, we've kind of gone through a lot of details about each of these different boards and ecosystems, and there's a lot of cool stuff in both areas. It may sound like we're advocating for one or the other or whatever. There's strengths and weaknesses. There's pros and cons of each of these approaches, and I think maybe it's helpful. I'm thinking, particularly of our listener, Russell, who emailed us this week asking, like, Where do I get started? It's so overwhelming. What are some of the pros and cons that you see of using the microbit for teaching, for example?

Kelly Schuster-Paredes:
Okay, so pros for the microbit first time photos, getting them hubs, getting them excited, not having to worry about moving files, being able to transfer the code that they learned and basics into the microbet, not worrying knowing that you have to import the library, the module, but not really having to understand that's a pro, definitely. I can probably get unless we have a massive project where the kids have a design challenge. You can probably get three to four weeks of fun with the microbits. It's not until you start putting servos in there or sensors that the microbit starts becoming even more so you have a limit. So that's kind of a Con. That's about it. So the cons of the BBC, it only goes so far, so your limits of your learner and you will know when they're tired, but you just start pulling out. Oh, have you seen this Led or have you seen this Piano or this Pie Game or the Finch Spot? And you can really start using the microbit for different things?

Sean Tibor:
I will add one Con to it because I think one of the things that is definitely a strength of the microbe is that you know exactly the form that it's going to be. So there's just a ton of accessories out there. The Finch, the keyboards, the lights, all of those things are really powerful. But one of the most frustrating things for me, and I think for you has been we get this really cool piece of hardware, and we're like, Where's the Python code for this? It's only in make code. It's something that the developer of the accessory created a make code library, and it's really easy and fun to use, because you just import the blocks that you need, but there's almost no Python support. So one of the other cons is just watching for making sure that you have that compatibility with Python for your microbit accessories. And we know that there are certain accessories that work really well. Like the Fitch robot. They have fantastic Python support, but other things like NeoPixel rings might be okay. They might not be okay. And your mileage may vary on that.

Kelly Schuster-Paredes:
Yacht has a Python supporting NeoPixel. And believe it or not, it can actually power 24 NeoPixels versus the strips, which you can't get more than eight. And the Gaboom NeoPixel Ray solid the kitchen. I have it. I'm not sure if they've updated it recently, but I believe it was only so your kid gets it. They're like, what is this? And like, oh, don't use that one. It's very cool. And you can make really cool projects with it. But I want you to use Python.

Sean Tibor:
Yes. So that is one of the challenges. And I think a Con of the ecosystem is just that there's not that strong support there. Now when we flip over to the circuit Python, let's talk through pros and cons. I think you've covered a few of the kind of initial steps as cons, but maybe you could just summarize have your experience with that.

Kelly Schuster-Paredes:
So definitely it's a lot more prep on a teacher. So for me, that is a Con, and you really cannot go in to and we've done this before, and we're telling you from experience, you cannot go in there and go figure it out. And I looked at Shauna, they can't figure out if I can't figure it out. They can't figure it out.

Sean Tibor:
The bar is a lot higher.

Kelly Schuster-Paredes:
Another Con, again, for me, is the wealth of information that they can Google. That is a Con at the lower level. I'm not going to say that for Sean or for your hardware people for your high schoolers or College. I'm talking about 7th graders. There's so much fun. There's so many fun projects. And the problem is when they start getting into this code, they really don't understand what's going on in it. So as a good teaching rule, if you can bring out those basics and really focus the attention to what they can do with what they know, then it goes as a positive across the board for Circuit Playground, that's really all my cons is that it's just a lot of teacher prep, and we're hopefully to do this better. Second quarter.

Sean Tibor:
Yeah. We have some ideas for how to make this work a lot better. I think for me, the Con is definitely that initial. Those initial steps are, I think about as simple as they can be for the design of the Circuit Python ecosystem. So if you were talking about one or two boards, then you might have a much simpler start up teaching experience that you could design. But the real pro for me on the Circuit Python ecosystem is the fact that you have so much diversity and so many different options. When I think about microbit, I think of it primarily as a teaching and exploration tool and a way to rapidly prototype stuff, right? I know it's going to work. I know it's consistent. I know it's relatively standardized across everything. So for example, you and I did this microbit microorganisms genetics project a few years ago. We could hand out the same boards to all the students, and we had a few growing pains and some things we had to figure out. But for the most part, our experience was pretty consistent for all those students. So I think of that as a tool that I can use to teach consistently and have that standardization and have a pretty powerful initial experience for students with the microbit. But where I get really excited about Circuit Python is in the diversity, the diversity of boards, the sensors, the different projects that can be made. And I can give you some examples. I have a board here. I think it's from a pie Maroni in the UK. It's super cool because one of the things that Adafruit has is a standardized layout and system called the Feather, and it has the same pins and the same layout spacing everything. So you can stack different boards together, the two different things. So I might have one board that is actually running my Circuit Python code that has the processor, maybe like WiFi or a few other things on it. But then I can stack other boards on it like a sandwich or a skyscraper of boards. And those are called feather wings. They're like accessory boards that you can stack onto it. So this feather wing that I have is called the Enviro Plus, and it's a little bit of an expensive board, but it's super cool. It's got a little display on it, a little LCD display. It's got a gas sensor on it that consents different volatile gasses. It's got a microphone on it. It's got a light sensor, it's got a temperature and humidity and pressure sensor on it. And then you can even hook up a particulate sensor to it as well. So this one board has a lot of different things going on. And in Circuit Python, there are libraries that you can download that have code that simplifies the experience of accessing all this information. So one of the powerful strengths of Circuit Python is this huge set of libraries that let you talk to a huge variety of sensors to talk to things on the Internet, to make it a true maker sort of experience where I can make things with these boards now. So when I think about Circuit Python, I really think about making stuff and building things and doing stuff that is maybe a little bit more unique or off the beaten path. And I can do a lot of those things with the microbit, but I can do so much more of it with Circuit Python. And so that's where I see the kind of the pros and cons is. Yeah, there's a bigger barrier to entry at the beginning. But then the growth and the trajectory that you could take it goes so much further and so much wider with Circuit Python, and that's one of the things that makes me so excited about.

Kelly Schuster-Paredes:
So I'm going to go back down to the lower level, because where I'm living right now with the Circuit Python having said that, yes, you make a lot. I do have to admit, and this has been a good grabber of attention for a lot of and not to put a gender on it. But a lot more of my female coders really want me to bring in all the sewing kits. And we've had six people just from the first course that are like, I can make this. And you know what, at the end of the day for me, that is a huge win, because once we show them how to light up some NeoPixels and talk about some conductive threads, they're like, I can show I can code and so can I do more? And then can I take this and can I take this home? And I've had a couple of mothers email me and say thank you and not thank you because my daughter won't stop talking about what she can make light up and she's sewing things.

Sean Tibor:
So.

Kelly Schuster-Paredes:
If you're getting started with the circuit playground, definitely showing that the NeoPixels are intriguing. And Halloween is coming up putting around your mask. And there's so many cool little attachments that you like Shaun says on the lower level, too, that you can use without all the big library.

Sean Tibor:
And I think that's really the attractive part. I say maker, because I have the stuff that I love to make, but there's so many things and it is so diverse that there's something for everyone. And that is really cool. I mean, wearable technology is really cool when you can sew it, when you can make it, when you can craft it. Cardboard, knitting, whatever. I'm waiting for some Led lights to show up from Amazon so I can knit these little Led blobs. I love making stuff, and I love that combination of thinking through the problem and using my hands to solve the problem. And that, I think is the power of hardware in general, not just the microbit or the circuit Python, but I really think that that's what engages people, whether they're middle schoolers or PreK students or high school or adults like that ability to make something and create something and be able to show people like, look at this cool thing I made that's really powerful, and that goes beyond I think what a lot of students get out of their first computer science classes. It's not that much fun to be able to say, look at this linked list. I made it's so cool. It is, but maybe easier for people to understand. Like, I sewed the circuit into a shirt that I made, or I 3D printed this thing and added lights and sound to it.

Kelly Schuster-Paredes:
That's not to mention we get to talk about Tuples or Tuffles. However, one of them.

Sean Tibor:
I go with two poles. I go with Tuples. I still think of my Polish, a grad school professor who always had Tuples. And so I always say Tuples.

Kelly Schuster-Paredes:
We had too much to say. We're going on an hour, so we're wrapping it up. Shaun.

Sean Tibor:
Yes, I think one of the things we'll wrap up with here and this was not the intent of our show today, but it might be a nice side benefit is we're going to post a ton of links to stuff in the show notes, and we're going to show you a lot of our favorite things. Some of them are going to be on Amazon. A lot of them are going to be on Adafruit. If you end up buying some of this stuff as a result of this show, if you buy the stuff from Amazon, we get a little slice of it from affiliate links. And so we'd rather help support the show. But you can always do is just go tell Adafruit and tell the BBC what an amazing job they're doing, right? Because this stuff is really cool. It's really powerful. It's bringing in thousands, hundreds of thousands, millions of people into this world of making stuff and being empowered to create things instead of just consuming them. And I think that's the real power of hardware that micro Python, the microbit circuit Python and Adafruit have brought to the table, and it's more than just the companies and the organizations. There are hundreds, thousands of people out there who are contributing to make this possible, and we couldn't do it without them here.

Kelly Schuster-Paredes:
So I can plug my book of the show week because I always have another book switch of topics. I did start reading a new book. I'm really excited about it. This guy I've been a fan of him since I saw him speaking at one of the conferences I went to a couple of years ago. It's Richard Culada. He is the CEO of ISC love ISC everything that ISC does for educators around the world with training on use of technology, digital technology. So anyway, he has a book out. It's called Digital for Good, raising kids to thrive in the online world. I love talking about digital citizenship. That was my first connection with getting into technology, and you're going to say, oh, this is another anti bullying beak leery of your footprint. It's not. I'm just going to read a little bit of a quote from what he said. One of the things that COVID taught us as we all moved online was that there is a great power in being able to learn with technology and through technology. All of a sudden distances didn't seem to matter. And he goes through these four dysfunctions, I think, is the word that he uses about things that the kids have to navigate. And it's a little bit enlightening for me as a non tech native, but think about it. Your grandfather, who they saw in a year, was always that person within the radius that they could talk to at work or talk to in the neighborhood. And some of the numbers that were in this research, our children today have the opportunity to meet the same amount of people that their grandparents did in one day. So they're navigating these two worlds both physical and digital, constantly. They are, in the essence, digital citizenship citizens of the world because they are just navigating seamlessly both of these worlds and starts going into the dysfunctions, and I haven't finished it and just check it out. I think it's a cool book that's going to open up some eyes, especially for parents. So we'll put a link to that, too.

Sean Tibor:
Yeah. I think it's a really good point because this is the generation that is navigating things in a different way than previous generations. And I think every generation says that about younger generations, but there's definitely a lot to be learned here. And I think if we listen to our students as they're navigating these different challenges and we hear what they're going through and hear how they're solving it and listen first, there's a lot of lessons that can be applied to our own lives. I am always shocked by the number of students who have said my parents said, I'm always on my phone, but they're always on their phone, right? It's not something that just the younger generation is doing, but every generation is struggling with a lot of the same lessons right now, and the old rules and the old adages need to be updated, and we need to make sure that we're taking in the ideas and the thoughts of the kids who are growing up with it right now, because just like in computer science, they have no preconceived notions of what's supposed to be happening at any point or what the old rules were, that they're making this up as they go along. And I think it's a great way to listen to people who have no filters on it. They're making it up from the beginning.

Kelly Schuster-Paredes:
We'll check it out. I'll give you some more information. I've been tweeting I'll. Tweet about it. Really looking at all these dysfunctions with fake news, a sensitive topic that we will not really get into, but just the ability for the children to see the sneaky advertisements, body image issues, happiness always in the social media. And of course, bullying. So October is antibullying month. So we're going to do a shout out for that.

Sean Tibor:
I'm sorry. Did you say antibullying month? Are we going against it? No boolean. There's a lot of data type hate here. All of a sudden it's mean person. Okay, so October is anti bullying month, and this is a great time to refresh ourselves on that topic and just make sure that we're thinking about it with the freshest information we can possibly get. So we'll put a link to the book in the show notes. If you buy it on Amazon, it supports the show and with that, if you want to engage with us more, tell us about the different projects that you're working on. Tell us about your experiences with hardware as you veteran to the space. The best way to do that is either through Twitter at teaching Python FM. I'm sorry at teachingpython. Our website is teaching Python FM, and you can always send us an email through that. We've been really enjoying the listener emails. We've been getting, especially over the last few months. Lots of great ideas. Lots of great questions. Keep them coming. Send them our way. And with that, I think that wraps us up. Absolutely.

Kelly Schuster-Paredes:
My kids are tired of being quiet.

Sean Tibor:
Okay, well, let your kids go loud again. Okay. So for teaching Python.

Kelly Schuster-Paredes:
This is Sean, and it's is Kelly signing up.
